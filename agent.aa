// vars:
// var[${repo}_rules] - distribution rules of repo
// var[${repo}_owner] - repos owner's address
// var[${repo}_pool_${asset}] - repo's undistributed pool in asset
// var[nickname_${address}] - donor ranking nickname
// var[${repo}_total_received_${asset}] - total received by repo in asset
// var[${repo1}_to_${repo2}_${asset}] - total forwarded from repo1 to repo2 in asset
// var[paid_to_${address}_${asset}] - total paid to repo owner

{
	bounce_fees: { base: 10000 },
	getters: `{
		$attestor = 'QMWQRJV6NCYGUI6X7BWRKLLBQVQYLZ27';
		$has_attestation = ($address, $github_username) => {
			$attestation = attestation[[attestors=$attestor, address=$address]].github_username;
			typeof($attestation) == 'string' AND $attestation == $github_username
		};

		$verify_repo = ($str) => {
			$sp = split($str, '/');
			if (length($sp) != 2 OR length($sp[0]) < 1 OR length($sp[1]) < 1) {
				bounce('Invalid repo: ' || $str);
			}
		};

		$veirfy_rules = ($rules, $own_repo) => {
			if (typeof($rules) != 'object' OR is_array($rules)) {
				bounce('rules is not an object');
			}

			if (length($rules) > 10) {
				bounce('Maximum number of nested repositories is 10');
			}

			if (length($rules) == 0) {
				return 0;
			}

			$total = reduce($rules, 10, ($acc, $key, $value) => {
				$verify_repo($key);
				if ($key == $own_repo) {
					bounce('Invalid repo: ' || $key || ' Don\'t set own repo in rules; You will receive the unshared reminder');
				}

				if (typeof($value) != 'number') {
					bounce('Not a number ' || $value || ' in repo ' || $key);
				}
				$acc + $value
			}, 0);

			$total
		};
	}`,
	messages: {
		cases: [

			// set rules
			{
				if: `{trigger.data.set_rules AND trigger.data.owner AND trigger.data.project}`,
				messages: [
					{
						app: 'state',
						state: `{
							if (!$has_attestation(trigger.address, trigger.data.owner)) {
								bounce('Address ' || trigger.address || ' has no attestation for ' || trigger.data.owner);
							}

							$repo = trigger.data.owner || '/' || trigger.data.project;
							$rules = exists(trigger.data.rules) ? trigger.data.rules : {};
							$total = $veirfy_rules($rules, $repo);
							if ($total > 100) {
								bounce('Sum of rules distribution is more than 100');
							}

							var[$repo || '_rules'] = $rules;
							var[$repo || '_owner'] = trigger.address;

							response['message'] = 'Rules for ' || $repo || ' are set';
						}`
					}
				]
			},

			// donate
			{
				if: `{trigger.data.donate AND trigger.data.repo}`,
				messages: [
					{
						app: 'state',
						state: `{
							$verify_repo(trigger.data.repo);

							$base_pool_var = trigger.data.repo || '_pool_base';
							$base_amount = trigger.output[[asset=base]] - 1000; // 1000 bytes storage fee
							var[$base_pool_var] = exists(var[$base_pool_var]) ? var[$base_pool_var] + $base_amount : $base_amount;

							$stat_total_base_var = trigger.data.repo || '_total_received_base';
							var[$stat_total_base_var] = exists(var[$stat_total_base_var]) ? var[$stat_total_base_var] + $base_amount : $base_amount;
							response['donated_in_base'] = $base_amount;

							$asset = trigger.output[[asset!=base]].asset;
							if ($asset == 'ambiguous') {
								bounce('Ambiguous asset');
							}

							if ($asset != 'none') {
								$asset_amount = trigger.output[[asset!=base]];
								$asset_pool_var = trigger.data.repo || '_pool_' || $asset;
								var[$asset_pool_var] = exists(var[$asset_pool_var]) ? var[$asset_pool_var] + $asset_amount : $asset_amount;

								$stat_total_asset_var = trigger.data.repo || '_total_received_' || $asset;
								var[$stat_total_asset_var] = exists(var[$stat_total_asset_var]) ? var[$stat_total_asset_var] + $asset_amount : $asset_amount;
								response['donated_in_' || $asset] = $asset_amount;
							}

							response['message'] = 'Successful donation to '  || trigger.data.repo;
						}`
					}
				]
			},

			// distribute
			{
				if: `{trigger.data.distribute AND trigger.data.repo}`,
				init: `{
					$verify_repo(trigger.data.repo);
					$rules_var = trigger.data.repo || '_rules';
					$owner_var = trigger.data.repo || '_owner';

					if (exists(var[$rules_var])) {
						$asset = exists(trigger.data.asset) ? trigger.data.asset : 'base';
						$asset_pool_var = trigger.data.repo || '_pool_' || $asset;
						if (!exists(var[$asset_pool_var]) OR var[$asset_pool_var] == 0) {
							bounce('Nothing to distribute in repo ' || trigger.data.repo || ' for asset ' || $asset);
						}

						$to_self = var[$asset_pool_var] - reduce(var[$rules_var], 10, ($acc, $repo, $percent) => {
							$acc + floor(var[$asset_pool_var] * $percent / 100)
						}, 0);
					} else {
						bounce('Rules for repo ' || trigger.data.repo || ' are not set yet');
					}
				}`,
				messages: [
					{
						app: 'payment',
						payload: {
							asset: `{$asset}`,
							outputs: [
								{
									address: `{var[$owner_var]}`,
									amount: `{$to_self}`
								}
							]
						},
					},
					{
						app: 'state',
						state: `{
							foreach(var[$rules_var], 10, ($repo, $percent) => {
								$to_share = floor(var[$asset_pool_var] * $percent / 100);
								$repo_pool_var = $repo || '_pool_' || $asset;
								var[$repo_pool_var] = exists($repo_pool_var) ? var[$repo_pool_var] + $to_share : $to_share;

								$stat_forwarded_var = trigger.data.repo || '_to_' || $repo || '_' || $asset;
								var[$stat_forwarded_var] += $to_share;

								$stat_total_recv_var = $repo || '_total_received_' || $asset;
								var[$stat_total_recv_var] += $to_share;
							});

							$stat_paid_to_var = 'paid_to_' || var[$owner_var] || '_' || $asset;
							var[$stat_paid_to_var] = exists(var[$stat_paid_to_var]) ? var[$stat_paid_to_var] + $to_self : $to_self;

							var[$asset_pool_var] = 0;
							response['message'] = 'Distribution for repo ' || trigger.data.repo || ' in asset ' || $asset || ' done';
						}`
					}
				]
			},

			// set nickname
			{
				if: `{trigger.data.nickname}`,
				messages: [
					{
						app: 'state',
						state: `{
							if (typeof(trigger.data.nickname) != 'string') {
								bounce('Nickname is not a string');
							}
							var['nickname_' || trigger.address] = trigger.data.nickname;
							response['message'] = 'Nickname for ' || trigger.address || ' is now ' || trigger.data.nickname;
						}`
					}
				]
			},
		]
	}
}
